// <auto-generated />
using System;
using Education.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Education.Data.Migrations
{
    [DbContext(typeof(EducationDbContext))]
    partial class EducationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Education.Data.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8D04DCE2-969A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "351ed65f-2b79-4c2f-92db-2c9fa680427d",
                            Description = "Teacher",
                            Name = "Tutor",
                            NormalizedName = "Tutor"
                        },
                        new
                        {
                            Id = "8E04DCE2-970A-435D-BBA4-DF3F325983DC",
                            ConcurrencyStamp = "55de9683-f1cb-4111-a159-7600709e63a2",
                            Description = "Adminstrator",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Education.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3db32e4f-0d29-4733-8588-5aa9fed039bf",
                            Email = "phamlequan118@gmail.com",
                            EmailConfirmed = true,
                            Image = "/images/pic-1.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "phamlequan118@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfX9BrTEKuwGQK1x2y01ur7GfSySjsK/88p76X1gxtEgBegDQM81WgUrT7rYxgnmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Quan"
                        },
                        new
                        {
                            Id = "70BD714F-9576-45BA-B5B7-F00649BE00DE",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "42c7e74d-c6d7-4e5f-8032-6aec5c80d990",
                            Email = "phamlequan@gmail.com",
                            EmailConfirmed = true,
                            Image = "/images/pic-1.jpg",
                            LockoutEnabled = false,
                            NormalizedEmail = "phamlequan@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENIrs4RCCpvEzowJmdhYvS4vkI4wiHDOZsDj8lsGeB6bKeCOJKjMB1vzdS4bosnYBg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "QuanLe"
                        });
                });

            modelBuilder.Entity("Education.Data.Entities.BookMark", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("BookMarks", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE",
                            PlaylistId = 1
                        },
                        new
                        {
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE",
                            PlaylistId = 2
                        });
                });

            modelBuilder.Entity("Education.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentId = 1,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3780),
                            Message = "xin chao casc ban",
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE"
                        },
                        new
                        {
                            Id = 2,
                            ContentId = 2,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3782),
                            Message = "xin chao casc ban 2",
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE"
                        });
                });

            modelBuilder.Entity("Education.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Education.Data.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Contents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3744),
                            Description = "cai lmao",
                            PlaylistId = 1,
                            Status = 1,
                            Thumb = "/images/post-1-1.png",
                            Title = "HTML tutorial (Part 1)",
                            Video = "/images/vid-1.mp4"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3746),
                            Description = "cai lmao",
                            PlaylistId = 1,
                            Status = 1,
                            Thumb = "/images/post-1-2.png",
                            Title = "HTML tutorial (Part 2)",
                            Video = "/images/vid-1.mp4"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3747),
                            Description = "cai lmao",
                            PlaylistId = 1,
                            Status = 1,
                            Thumb = "/images/post-1-3.png",
                            Title = "HTML tutorial (Part 3)",
                            Video = "/images/vid-1.mp4"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3748),
                            Description = "cai lmao",
                            PlaylistId = 1,
                            Status = 1,
                            Thumb = "/images/post-1-4.png",
                            Title = "HTML tutorial (Part 4)",
                            Video = "/images/vid-1.mp4"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3749),
                            Description = "cai lmao",
                            PlaylistId = 2,
                            Status = 1,
                            Thumb = "/images/post-2-1.png",
                            Title = "HTML tutorial (Part 1)",
                            Video = "/images/vid-2.mp4"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3749),
                            Description = "cai lmao",
                            PlaylistId = 2,
                            Status = 1,
                            Thumb = "/images/post-2-2.png",
                            Title = "HTML tutorial (Part 2)",
                            Video = "/images/vid-2.mp4"
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3751),
                            Description = "cai lmao",
                            PlaylistId = 2,
                            Status = 1,
                            Thumb = "/images/post-2-3.png",
                            Title = "HTML tutorial (Part 3)",
                            Video = "/images/vid-2.mp4"
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3752),
                            Description = "cai lmao",
                            PlaylistId = 2,
                            Status = 1,
                            Thumb = "/images/post-2-4.png",
                            Title = "HTML tutorial (Part 4)",
                            Video = "/images/vid-2.mp4"
                        });
                });

            modelBuilder.Entity("Education.Data.Entities.Like", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("Likes", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE",
                            ContentId = 1
                        },
                        new
                        {
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE",
                            ContentId = 2
                        });
                });

            modelBuilder.Entity("Education.Data.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3710),
                            Description = "Description",
                            Status = 1,
                            Thumb = "/images/thumb-1.png",
                            Title = "HTML tutorial",
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 1, 1, 14, 26, 57, 659, DateTimeKind.Local).AddTicks(3721),
                            Description = "Description",
                            Status = 1,
                            Thumb = "/images/thumb-2.png",
                            Title = "CSS tutorial",
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "69BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8D04DCE2-969A-435D-BBA4-DF3F325983DC"
                        },
                        new
                        {
                            UserId = "70BD714F-9576-45BA-B5B7-F00649BE00DE",
                            RoleId = "8E04DCE2-970A-435D-BBA4-DF3F325983DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("Education.Data.Entities.BookMark", b =>
                {
                    b.HasOne("Education.Data.Entities.Playlist", "Playlist")
                        .WithMany("Bookmarks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Education.Data.Entities.AppUser", "AppUser")
                        .WithMany("BookMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Education.Data.Entities.Comment", b =>
                {
                    b.HasOne("Education.Data.Entities.Content", "Content")
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Education.Data.Entities.AppUser", "AppUser")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Education.Data.Entities.Content", b =>
                {
                    b.HasOne("Education.Data.Entities.Playlist", "Playlist")
                        .WithMany("Contents")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Education.Data.Entities.Like", b =>
                {
                    b.HasOne("Education.Data.Entities.Content", "Content")
                        .WithMany("Likes")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Education.Data.Entities.AppUser", "AppUser")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Education.Data.Entities.Playlist", b =>
                {
                    b.HasOne("Education.Data.Entities.AppUser", "AppUser")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Education.Data.Entities.AppUser", b =>
                {
                    b.Navigation("BookMarks");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("Education.Data.Entities.Content", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Education.Data.Entities.Playlist", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
